name: Lint and Format Code

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          pip install black

      - name: Checkout dev
        if: github.ref == 'refs/heads/dev'
        run: |
          # Checkout dev branch
          git checkout dev

      - name: Checkout main
        if: github.ref == 'refs/heads/main'
        run: |
          # Checkout main branch
          git checkout main
      
      - name: Run Black
        id: run_black
        run: |
          black -l 78 -t py312 ./*.py ./wemod

      - name: Commit changes on dev
        if: github.ref == 'refs/heads/dev' && steps.run_black.outcome == 'success'
        id: commit_changes_dev
        run: |
          # Commit changes
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m 'Github actions automatic code formatting on dev branch' -m 'This is an automatic task, run by a GitHub workflow, to automatically format the Python code in the repo, with the code formatter "black"' || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge dev into main
        if: github.ref == 'refs/heads/dev' && steps.commit_changes_dev.outcome == 'success'
        run: |
          # Fetch and checkout main branch
          git fetch origin main
          git checkout main
          git pull origin main

          # Create a temporary directory and copy the contents of the main branch including .git
          mkdir ../tmp-main
          cp -r . ../tmp-main

          # Fetch and checkout the dev branch
          git fetch origin dev
          git checkout dev
          git pull origin dev

          # Move .git directory temporarily to skip it during the 
          mv .git ../tmp-git

          # Copy the contents of the dev branch to the temporary directory
          cp -r . ../tmp-main

          # Move the .git directory back
          mv ../tmp-git .git

          # Change to the temporary directory, add changes, and commit
          cd ../tmp-main
          git add .
          git commit -m "Auto merge/sync branch 'dev' into 'main'" || echo "No changes to commit"

          # Push changes to main branch
          git push origin main

          # Run old code as well to sync merge reqests
          git fetch origin main
          git checkout main
          git pull origin main
          git merge dev --strategy-option ours -m "Auto merge/sync branch 'dev' into 'main'" --allow-unrelated-histories
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changes on main
        if: github.ref == 'refs/heads/main' && steps.run_black.outcome == 'success'
        id: commit_changes_main
        run: |
          # Commit changes
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m 'Github actions automatic code formatting on main branch' -m 'This is an automatic task, run by a GitHub workflow, to automatically format the Python code in the repo, with the code formatter "black"' || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Merge main into dev
        if: github.ref == 'refs/heads/main' && steps.commit_changes_main.outcome == 'success'
        run: |
          # Fetch and checkout dev branch
          git fetch origin dev
          git checkout dev
          git pull origin dev

          # Create a temporary directory and copy the contents of the dev branch including .git
          mkdir ../tmp-dev
          cp -r . ../tmp-dev

          # Fetch and checkout the main branch
          git fetch origin main
          git checkout main
          git pull origin main

          # Move .git directory temporarily to skip it during the 
          mv .git ../tmp-git

          # Copy the contents of the main branch to the temporary directory
          cp -r . ../tmp-dev

          # Move the .git directory back
          mv ../tmp-git .git

          # Change to the temporary directory, add changes, and commit
          cd ../tmp-dev
          git add .
          git commit -m "Auto pull/sync back changes from 'main' into 'dev'" || echo "No changes to commit"

          # Push changes to dev branch
          git push origin dev

          # Run old code as well to sync merge reqests
          git fetch origin dev
          git checkout dev
          git pull origin dev
          git merge main --strategy-option ours -m "Auto pull/sync back changes from 'main' into 'dev'" --allow-unrelated-histories
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
