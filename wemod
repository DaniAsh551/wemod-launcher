#!/usr/bin/env python3

import shutil
import sys
import os
import re
import subprocess
from util import cache, exit_with_message, get_dotnet48, popup_download, wine, winetricks, log, popup_execute, pip, popup_options, deref
from setup import main

# Define paths and constants
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
WEMOD_BAT = "C:\\\\windows\\\\system32\\\\start.exe Z:" + "\\\\".join(SCRIPT_PATH.split("/")) + "\\\\wemod.bat"
BASE_STEAM_COMPAT = os.getenv("STEAM_COMPAT_DATA_PATH")
WINEPREFIX = os.path.join(BASE_STEAM_COMPAT, "pfx")
STEAM_COMPAT_FOLDER = os.path.dirname(WINEPREFIX)
WINETRICKS = os.path.join(SCRIPT_PATH, "winetricks")
INIT_FILE = os.path.join(WINEPREFIX, ".wemod_installer")

def parse_version(version_str = None):
  # Replace '-' with '.' and ',' with '.'
  if version_str:
    dot_version = version_str.replace("-", ".").replace(",", ".")

    # Remove the Everything except for numbers and dots
    reduced_version = re.sub(r"[^\d.]", "", dot_version)

    # Remove . from front and back
    clean_version = reduced_version.strip(".")

    # Split by '.' and limit to the first two components (major.minor)
    parts = clean_version.split('.')
    if len(parts) > 2:
      parts = parts[:2]  # Keep only the first two parts

    # Rejoin the parts and convert to a float
    version_number = '.'.join(parts)
    try:
      return float(version_number)
    except ValueError:
      return None
  return None

# Scan the steam compat folder for wemod installed prefixes
def scanforversionfolder(current_proton_version: str):
  def read_version(version_file): # read file
    try:
      with open(version_file, 'r') as file:
        return file.read().strip()
    except FileNotFoundError:
        return None

  # At default we dont know of any available version
  closest_version_folder = None
  closest_version_number = None
  # And we have infinite div between them
  version_diff = float('inf')

  # For all folders in steam compat
  for folder in os.listdir(STEAM_COMPAT_FOLDER):
    # Get the version file, folder path and check if wemod is installed
    folder_path = os.path.join(STEAM_COMPAT_FOLDER, folder)
    version_file = os.path.join(folder_path, "version")
    if os.path.isdir(folder_path) and os.path.exists(os.path.join(folder_path, "pfx", ".wemod_installer")):
      folder_version = read_version(version_file)
      if folder_version:
        # Compare version numbers
        try:
          if abs(float(folder_version) - float(current_proton_version)) < version_diff:
            version_diff = abs(float(folder_version) - float(current_proton_version))
            closest_version_folder = folder_path
            closest_version_number = folder_version
        except ValueError:
          continue
  return closest_version_number, closest_version_folder


# Initialize the environment
def init(proton: str) -> None:
  import PySimpleGUI as sg

  # Create wineprefix directory if it doesn't exist
  if not os.path.isdir(WINEPREFIX):
    os.makedirs(os.getenv("STEAM_COMPAT_DATA_PATH"), exist_ok=True)
    os.makedirs(WINEPREFIX, exist_ok=True)

  # If wemod is not installed try to copy a working prefix to the currend one
  log(f"Looking for init file '{INIT_FILE}' in '{WINEPREFIX}'")
  if not os.path.exists(INIT_FILE):
    # Grab active proton version
    result = subprocess.run([proton, "--version"], capture_output=True, text=True)
    current_proton_version = result.stdout.strip() if result.returncode == 0 else None
    cut_proton_version = parse_version(current_proton_version)
    log(f"Loking for compatible wine prefixes in '{STEAM_COMPAT_FOLDER}' whit proton version '{cut_proton_version}'")

    # Get closest version that has wemod installed
    closest_version, closest_prefix_folder = scanforversionfolder(cut_proton_version)
    cut_version = parse_version(closest_version)
    log(f"Found was '{cut_version}' on '{closest_prefix_folder}'")

    if closest_prefix_folder and cut_version and cut_version != cut_proton_version:
      response = sg.popup_yes_no(f"This Proton version is not installed. Would you like to attempt to use the closest installed version ({closest_version_number}) which may result in some issues?")
      if response == "Yes":
        # Copy the closest version's prefix to the gameprefix
        shutil.copytree(closest_prefix_folder, BASE_STEAM_COMPAT, dirs_exist_ok=True)
        log(f"Copied Proton version {closest_version_number} prefix to game prefix")
      else:
        log("User chose not to use an alternative Proton version.")
    elif closest_prefix_folder and cut_version and cut_version == cut_proton_version:
      shutil.copytree(closest_prefix_folder, BASE_STEAM_COMPAT, dirs_exist_ok=True)
      log("Copied exact Proton version prefix to game prefix")
    else:
      log("No compatible Proton version found in the compatibility folder.")

  # Check for the initialization file in the wineprefix
  log(f"Looking once more for the init file")
  if os.path.exists(INIT_FILE):
    log("Found init file. Continuing launch...")
    return

  log("Init file not found! Attempting to prepare the WINEPREFIX")
  
  # User choice for prefix setup
  prefix_op = popup_options("Prefix Setup", "Would you like to build/modify your prefix or download an already setup one?", [ "build", "download" ])

  # Determine proton directory
  proton_dir = proton.split("/")[:-1]
  proton_dir.append("files")
  proton_dir.append("bin")
  proton_dir = "/".join(proton_dir)
  log("Using wine from Proton at path: '{}'".format(proton_dir))

  # Call appropriate function based on user choice
  if prefix_op == "build":
    build_prefix(proton_dir)
  else:
    download_prefix(proton_dir)

# Function to download and unpack a pre-configured wineprefix
def download_prefix(proton_dir: str) -> None:
  from shutil import which
  import PySimpleGUI as sg

  # Set environment path
  path = os.path.join(SCRIPT_PATH, "bin") + ":" + proton_dir + ":" + os.getenv("PATH")

  file_name = "wemod_prefix.tar.zst"
  link = "https://danimv.top/storage/" + file_name

  # Download or use cached prefix
  prefix_path = cache(file_name, lambda name: popup_download("Dowloading Prefix...", link, name))

  # Check and prepare for first launch
  if not os.path.exists(WINEPREFIX + "/drive_c"):
    log(WINEPREFIX)
    exit_with_message("First Launch","First Launch Detected: Please run the game once without wemod first.")

  # Unpack the downloaded prefix
  log("Unpacking prefix...")
  read_binary = "pv -petr" if which("pv") is not None else "cat"
  command = "sh -c \"{} '{}' | zstd -T0 -d -c | tar -xvf - -C '{}'\"".format(read_binary, prefix_path, WINEPREFIX)
  log("Using command '{}'".format(command))

  exit_code = popup_execute("Unpacking prefix...", command)
  if exit_code != 0:
    exit_message = "Prefix unpacking failed with code '{}'".format(exit_code)
    exit_with_message("ERROR", exit_message, exit_code)

  # Install additional dependencies
  log("Installing vkd3d and dxvk2030...")
  exit_code = winetricks("-q vkd3d dxvk2030", path)

  # Finalize the setup
  if exit_code == 0:
    log("Finished dependencies installation. Writing init file...")
    open(INIT_FILE, "a").close()
  else:
    exit_message = "dxvk and vkd3d installation failed with code '{}'".format(exit_code)
    exit_with_message("ERROR", exit_message, exit_code)

# Function to build a new wineprefix
def build_prefix(proton_dir: str) -> None:
  import PySimpleGUI as sg

  # Set environment path
  path = os.path.join(SCRIPT_PATH, "bin") + ":" + proton_dir + ":" + os.getenv("PATH")

  #deref
  winpath = os.path.join(WINEPREFIX, "drive_c", "windows")
  log(f"Dereferencing '{winpath}'")
  deref(winpath)

  deps = []

  # Choose method to install dotnet48
  dotnet48_method = popup_options("dotnet48",
    "Would you like to install dotnet48 with winetricks (default) or with wemod-launcher?",
    [ "winetricks", "wemod-launcher" ]
  )

  # Add dependencies to the list
  deps.append("-q sdl cjkfonts vkd3d dxvk2030")
  
  if dotnet48_method == "winetricks":
    deps.append("-q dotnet48")
  
  # Install dependencies
  log("Running dependencies installation. This could take a while...")
  main()

  # Install each dependency
  resp = 0
  dep_i = -1
  while resp == 0 and (len(deps) - 1) > dep_i:
    dep_i = dep_i + 1
    resp = winetricks(deps[dep_i], path)

  # Install dotnet48 using wemod-launcher if selected
  if dotnet48_method == "wemod-launcher":
    log("Installing dotnet48...")
    dotnet48 = get_dotnet48()
    wine("winecfg -v win7", path)
    dotnet48_result = wine(dotnet48, path)

    if dotnet48_result != 0 and dotnet48_result != 194 and dotnet48_result != -15:
      exit_with_message("dotnet48 install error", "dotnet48 installation exited with code '{}'".format(dotnet48_result))

  wine("winecfg -v win10", path) # Set Windows version to Windows 10

  # Finalize setup
  if resp == 0:
    log("Finished dependencies installation. Writing init file...")
    open(INIT_FILE, "a").close()
  else:
    exit_with_message("ERROR", "Failed dependencies installation with code '{}'. Aborting...".format(resp), resp)

# Main run function
def run(skip_init=False):
  ARGS= " ".join(sys.argv[1:])
  AARGS=ARGS.split(" -- ")
  REAPER_CMD=" -- ".join(AARGS[:-1])
  PROTON_CMD=AARGS[-1].split(" ")
  PROTON=PROTON_CMD[0]

  # Initialize environment if not skipped
  if not skip_init:
    init(PROTON)

  # Parse command to be executed
  COMMAND=" ".join(PROTON_CMD[2:])
  WIN_CMD=COMMAND.split(" ")[0].split("/")[-1] + " " + " ".join(COMMAND.split(" ")[1:])
  WIN_PATHS=WIN_CMD.split("/")
  DIR_CONTS = os.listdir(".")

  CORRECT_PATH = list(filter(lambda x: x in DIR_CONTS, WIN_PATHS))

  if len(CORRECT_PATH) > 0:
    WIN_CMD = WIN_CMD[WIN_CMD.index(CORRECT_PATH[0]):]

  WIN_CMD_SPLIT = WIN_CMD.split(".exe")
  WIN_CMD = WIN_CMD_SPLIT[0] + ".exe"
  LAUNCH_OPTIONS=""

  if len(WIN_CMD_SPLIT) > 1:
    LAUNCH_OPTIONS = ".exe".join(WIN_CMD_SPLIT[1:])

  SPLIT_WEMOD_BAT = WEMOD_BAT.split(" ")
  QUOTED_WEMOD_BAT = f'\'{SPLIT_WEMOD_BAT[0]}\' \'{" ".join(SPLIT_WEMOD_BAT[1:])}\''

  FINAL = f'{REAPER_CMD} -- {PROTON} waitforexitandrun {QUOTED_WEMOD_BAT} \'{WIN_CMD}\'{LAUNCH_OPTIONS}'
  log(f"Executing:\n\t{FINAL}\n")

  # Execute the final command
  process = subprocess.Popen(FINAL, stdout=subprocess.PIPE, shell=True)
  for line in iter(process.stdout.readline,''):
    if line == None or line == b'':
      break
    log(line.decode("utf8"))

  resp = process.wait()
  log(f"Exit command with '{resp}'")
  return "EXIT"

# Log Python version and ensure dependencies
log(sys.version)
log("Ensuring Dependencies...")
requirements_txt = os.path.join(SCRIPT_PATH, "requirements.txt")
return_code = pip("install --break-system-packages -r {}".format(requirements_txt))

# Handle dependency installation errors
if return_code != 0:
  log("Failed to install dependencies. pip Exited with code '{}'".format(return_code))
  exit(return_code)

# Main execution block
RESP = ""
try:
  RESP = run()
except Exception as e:
  RESP = "ERR:\n" + str(e)

# Log final response or error
log(str(RESP) + "\n\n\n")
