#!/usr/bin/env python3

import requests
import shutil
import sys
import os
import re
import subprocess
from util import cache, exit_with_message, get_dotnet48, popup_download, wine, winetricks, log, popup_execute, pip, popup_options, deref
from setup import main

# Define paths and constants
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
WEMOD_BAT = "C:\\\\windows\\\\system32\\\\start.exe Z:" + "\\\\".join(SCRIPT_PATH.split("/")) + "\\\\wemod.bat"
BASE_STEAM_COMPAT = os.getenv("STEAM_COMPAT_DATA_PATH")
WINEPREFIX = os.path.join(BASE_STEAM_COMPAT, "pfx")
STEAM_COMPAT_FOLDER = os.path.abspath(os.path.dirname(BASE_STEAM_COMPAT))
WINETRICKS = os.path.join(SCRIPT_PATH, "winetricks")
INIT_FILE = os.path.join(WINEPREFIX, ".wemod_installer")

def parse_version(version_str = None):
  # Replace '-' with '.' and ',' with '.'
  if version_str and isinstance(version_str, str):
    dot_version = version_str.replace("-", ".").replace(",", ".")

    # Remove the Everything except for numbers and dots
    reduced_version = re.sub(r"[^\d.]", "", dot_version)

    # Remove . from front and back
    clean_version = reduced_version.strip(".")

    if clean_version != "": #make shure there is some minor version number
      clean_version += ".0"

    # Split by '.' and limit to the first two components (major.minor)
    parts = clean_version.split('.')
    if len(parts) > 2:
      parts = parts[:2]  # Keep only the first two parts

    # Rejoin the parts and convert to a float
    try:
      return [int(parts[0]),int(parts[1])]
    except ValueError:
      return None
  elif isinstance(version_str, list):
    return version_str
  return None

def read_version(version_file): # read file
    try:
      with open(version_file, 'r') as file:
        return file.read().strip()
    except FileNotFoundError:
        return None

# Scan the steam compat folder for wemod installed prefixes
def scanfolderforversions(current_version_parts=[None,None]):
  # At default we dont know of any available version
  closest_version_folder = None
  closest_version_number = None
  priority = 5

  # For all folders in steam compat
  for folder in os.listdir(STEAM_COMPAT_FOLDER):
    # Get the version file, folder path and check if wemod is installed
    folder_path = os.path.join(STEAM_COMPAT_FOLDER, folder)
    version_file = os.path.join(folder_path, "version")

    if os.path.isdir(folder_path) and os.path.exists(os.path.join(folder_path, "pfx", ".wemod_installer")):
      folder_version_parts = parse_version(read_version(version_file))

      if folder_version_parts:
        if folder_version_parts[0] == current_version_parts[0] and folder_version_parts[1] == current_version_parts[1]:
          # Same major and minor version
          closest_version_folder = folder_path
          closest_version_number = folder_version_parts
          break
        elif folder_version_parts[0] == current_version_parts[0] and folder_version_parts[1] < current_version_parts[1] and priority >= 2:
          # Same major, lower minor version
          if not closest_version_folder or folder_version_parts[1] > closest_version_number[1]:
            priority = 2
            closest_version_folder = folder_path
            closest_version_number = folder_version_parts
        elif folder_version_parts[0] == current_version_parts[0] and folder_version_parts[1] > current_version_parts[1] and priority >= 3:
          # Same major, higher minor version
          if not closest_version_folder or folder_version_parts[1] < closest_version_number[1]:
            priority = 3
            closest_version_folder = folder_path
            closest_version_number = folder_version_parts
        elif folder_version_parts[0] < current_version_parts[0] and priority >= 4:
          # Lower major version
          if not closest_version_folder or folder_version_parts[1] > closest_version_number[1]:
            priority = 4
            closest_version_folder = folder_path
            closest_version_number = folder_version_parts
        elif folder_version_parts[0] > current_version_parts[0] and priority >= 5:
          # Higher major version
          if not closest_version_folder or folder_version_parts[1] < closest_version_number[1]:
            closest_version_folder = folder_path
            closest_version_number = folder_version_parts
  return closest_version_number, closest_version_folder

def syncwemod(folder=None):# Symlink wemod data to make all wemod prefixes use the same wemod data
  response = None
  package_prefix = os.getenv('PACKAGEPREFIX') # use PACKAGEPREFIX=true in front of the command to generate a ge-proton-prefix zip and exit
  if package_prefix and folder == None and package_prefix.lower() == "true":
    from util import copy_folder_with_progress
    log("Prefix packaging was requested with PACKAGEPREFIX=true in front of the command")
    current_proton_version = read_version(os.path.join(BASE_STEAM_COMPAT, "version"))
    cut_proton_version = parse_version(current_proton_version)
    destfile=os.path.join(STEAM_COMPAT_FOLDER,"prefixes","GE-Proton"+str(cut_proton_version[0])+"."+str(cut_proton_version[1]))
    os.makedirs(os.path.join(destfile,"temp"), exist_ok = True)
    shutil.rmtree(destfile)
    os.makedirs(destfile,exist_ok = True)
    copy_folder_with_progress(BASE_STEAM_COMPAT, destfile, {None}, {None})
    if os.path.exists(destfile+".zip"):
      os.remove(destfile+".zip")
    archive_command = f"cd '{destfile}' && zip -r '{os.path.basename(destfile)}.zip' *"
    log(archive_command)
    exit_code = popup_execute("Creating archive...", archive_command)
    os.rename(os.path.join(destfile,os.path.basename(destfile)) + ".zip",destfile + ".zip")
    shutil.rmtree(destfile)
    if exit_code != 0:
      exit_message = f"Archive creation failed with code '{exit_code}'"
      exit_with_message("ERROR", exit_message, exit_code)
    os.system('xdg-open "%s"' % os.path.join(STEAM_COMPAT_FOLDER,"prefixes"))
    log("Done creating Prefix zip")
    sys.exit(0)

  if folder == None:
    folder = BASE_STEAM_COMPAT

  WeModData = os.path.join(SCRIPT_PATH, "wemod_data") # link source
  WeModExtenal = os.path.join(folder, "pfx/drive_c/users/steamuser/AppData/Roaming/WeMod") # link dest

  log(f"Syncing wemod data from '{WeModExtenal}' to laucher dir '{WeModData}'")
  if not os.path.isdir(WeModData):
    os.makedirs(WeModData) # Make wemod data folder if missing
  if not os.path.isdir(WeModExtenal):
    os.makedirs(WeModExtenal)
  if os.path.isdir(WeModExtenal) and not os.path.islink(WeModExtenal): # If the extenal data exist
    if len(os.listdir(WeModData)) > 0 and len(os.listdir(WeModExtenal)) > 0: # If wemod folder and extenal folder are not empty
      import PySimpleGUI as sg # We ask what files to use
      response = sg.popup_yes_no(f"Warnig wemod might have been installed previously.\nUse wemod laucher dir account (Yes) or\nUse wemod prefix/game dir account (No)")
    if (response == "No" or len(os.listdir(WeModData)) == 0) and len(os.listdir(WeModExtenal)) > 0:
      if response == None:
        log("Local wemod data was missing")
      else:
        log("The local wemod data was requested to be overwritten")
      shutil.rmtree(WeModData)
      shutil.copytree(WeModExtenal, WeModData) # We copy from game if the user selects or if data is empty
    shutil.rmtree(WeModExtenal) # Remove wemod data from game
  if not os.path.isdir(WeModExtenal) and not os.path.islink(WeModExtenal):
    os.symlink(WeModData, WeModExtenal) # And symlink the data from the wemod laucher
    log("Linked wemod data to gameprefix")

# Initialize the environment
def init(proton: str) -> None:
  # Create wineprefix directory if it doesn't exist
  if not os.path.isdir(WINEPREFIX):
    os.makedirs(os.getenv("STEAM_COMPAT_DATA_PATH"), exist_ok=True)
    os.makedirs(WINEPREFIX, exist_ok=True)

  # If wemod is not installed try to copy a working prefix to the current one
  log(f"Looking for init file '{INIT_FILE}'")
  if not os.path.exists(INIT_FILE):
    # Grab active proton version
    current_proton_version = read_version(os.path.join(BASE_STEAM_COMPAT, "version"))
    current_version_parts = parse_version(current_proton_version)

    log(f"Loking for compatible wine prefixes in '{STEAM_COMPAT_FOLDER}' with proton version '{current_version_parts[0]}.{current_version_parts[1]}'")

    # Get closest version that has wemod installed
    closest_version, closest_prefix_folder = scanfolderforversions(current_version_parts)
    cut_version = parse_version(closest_version)

    log(f"Found was '{cut_version[0]}.{cut_version[1]}' on '{current_version_parts[0]}.{current_version_parts[1]}'")

    from util import copy_folder_with_progress

    response = "No"
    if closest_version and current_version_parts and closest_version == current_version_parts:
      response = "Yes"
    elif closest_version and current_version_parts and closest_version[0] == current_version_parts[0]:
      import PySimpleGUI as sg
      response = sg.popup_yes_no(f"The Proton version {current_version_parts[0]}.{current_version_parts[1]} dosn't have WeMod installed. Would you like to use the closest proton version {cut_version[0]}.{cut_version[1]} that has WeMod installed, which is probably going to work?", title="Likely compatible WeMod version detected")
    elif closest_version and current_version_parts and closest_version[0] != current_version_parts[0]:
      import PySimpleGUI as sg
      response = sg.popup_yes_no(f"The Proton version {current_version_parts[0]}.{current_version_parts[1]} dosn't have WeMod installed. Would you like to attempt to use the closest proton version {cut_version[0]}.{cut_version[1]} that has WeMod installed, which may result in some issues?", title="Mabye compatible WeMod version detected")
    else:
      log("No compatible Proton version found in the compatibility folder.")
    if response == "Yes":
      # Copy the closest version's prefix to the gameprefix
      log(f'Copying {closest_prefix_folder} to {BASE_STEAM_COMPAT}')
      syncwemod(closest_prefix_folder) # Sync wemod data in closest version
      copy_folder_with_progress(closest_prefix_folder, BASE_STEAM_COMPAT, {None}, {None})
      syncwemod() # Sync wemod data
      log(f"Copied Proton version {cut_version[0]}.{cut_version[1]} prefix to game prefix that was on version {current_version_parts[0]}.{current_version_parts[1]}")
    else:
      log(f"User chose not to use an alternative Proton version, the active version was {current_version_parts[0]}.{current_version_parts[1]}.")

  # Check for the initialization file in the wineprefix
  log(f"Looking once more for the init file")
  if os.path.exists(INIT_FILE):
    syncwemod() # Sync wemod data and prefix packaging
    log("Found init file. Continuing launch...")
    return

  log("Init file not found! Attempting to prepare the WINEPREFIX")

  # User choice for prefix setup
  prefix_op = popup_options("Prefix Setup", "Would you like to build/modify your prefix or download an already setup one?", [ "build", "download" ])

  # Determine proton directory
  proton_dir = proton.split("/")[:-1]
  proton_dir.append("files")
  proton_dir.append("bin")
  proton_dir = "/".join(proton_dir)
  log("Using wine from Proton at path: '{}'".format(proton_dir))

  # Call appropriate function based on user choice
  if prefix_op == "build":
    build_prefix(proton_dir)
  else:
    download_prefix(proton_dir)
  syncwemod() # Sync wemod data

def get_github_releases(repo_name):
    url = f"https://api.github.com/repos/{repo_name}/releases"
    response = requests.get(url)
    if response.status_code == 200:
        releases = response.json()
        return releases
    else:
        print("Failed to fetch releases.")
        return []

def find_closest_compatible_release(releases,current_version_parts=[None,None]):
  closest_release = None
  closest_version = None
  closest_release_url = None
  priority = 5

  for release in releases:
    tag_name = release.get("tag_name")
    if tag_name and tag_name.startswith("PfxVer"):
      release_version_parts = parse_version(tag_name)
      if release_version_parts and current_version_parts:
        if release_version_parts[0] == current_version_parts[0] and release_version_parts[1] == current_version_parts[1]:
          # Exact match
          closest_release = release
          closest_version = release_version_parts
          closest_release_url = release["assets"][0]["browser_download_url"]
          break
        elif release_version_parts[0] == current_version_parts[0] and release_version_parts[1] < current_version_parts[1] and priority >= 2:
          # Same major, lower minor version
          if not closest_release or release_version_parts[1] > closest_version[1]:
            priority = 2
            closest_release = release
            closest_version = release_version_parts
            closest_release_url = release["assets"][0]["browser_download_url"]
        elif release_version_parts[0] == current_version_parts[0] and release_version_parts[1] > current_version_parts[1] and priority >= 3:
          # Same major, higher minor version
          if not closest_release or release_version_parts[1] < closest_version[1]:
            priority = 3
            closest_release = release
            closest_version = release_version_parts
            closest_release_url = release["assets"][0]["browser_download_url"]
        elif release_version_parts[0] < current_version_parts[0] and priority >= 4:
          # Lower major version
          if not closest_release or release_version_parts[1] > closest_version[1]:
            priority = 4
            closest_release = release
            closest_version = release_version_parts
            closest_release_url = release["assets"][0]["browser_download_url"]
        elif release_version_parts[0] > current_version_parts[0] and priority >= 5:
          # Higher major version
          if not closest_release or release_version_parts[1] < closest_version[1]:
            closest_release = release
            closest_version = release_version_parts
            closest_release_url = release["assets"][0]["browser_download_url"]

  return closest_version, closest_release_url

# Function to download and unpack a pre-configured wineprefix
def download_prefix(proton_dir: str) -> None:
  from shutil import which
  import PySimpleGUI as sg

  # Check and prepare for first launch
  if not os.path.exists(WINEPREFIX + "/drive_c"):
    log(WINEPREFIX)
    exit_with_message("First Launch","First Launch Detected: Please run the game once without wemod first.")

  repo_name = "DaniAsh551/wemod-launcher"

  current_proton_version = read_version(os.path.join(BASE_STEAM_COMPAT, "version"))
  current_version_parts = parse_version(current_proton_version)

  releases = get_github_releases(repo_name)
  closest_version, url = find_closest_compatible_release(releases,current_version_parts)
  file_name = f"wemod_prefix{current_version_parts[0]}.{current_version_parts[1]}.zip"

  if closest_version and current_version_parts and closest_version == current_version_parts:
    response = "Yes"
  elif closest_version and current_version_parts and closest_version[0] == current_version_parts[0]:
    response = sg.popup_yes_no(f"This is most likely going to work, the version {closest_version[0]}.{closest_version[1]} is probably compatible with version {current_version_parts[0]}.{current_version_parts[1]}, download and use it?", title="Likely compatible version found")
  elif closest_version and current_version_parts:
    response = sg.popup_yes_no(f"The current version {closest_version[0]}.{closest_version[1]} might not be compatible with version {current_version_parts[0]}.{current_version_parts[1]}, download and use it?", title="Mabye copatible version found")
  else:
    log("there was no version to download error")
    sys.exit(0)
  if response == "No":
    log(f"User was unhappy with the version download choice of {closest_version[0]}.{closest_version[1]} for {current_version_parts[0]}.{current_version_parts[1]}, exiting")
    sys.exit(0)

  # Download or use cached prefix
  prefix_path = cache(file_name, lambda name: popup_download("Dowloading Prefix...", url, name))

  # Unpack the downloaded prefix
  log("Unpacking prefix...")
  command = f"unzip -o '{prefix_path}' -d '{BASE_STEAM_COMPAT}'"
  log(f"Using command for zip files: {command}")

  exit_code = popup_execute("Unpacking prefix...", command)
  if exit_code != 0:
    exit_message = f"Prefix unpacking failed with code '{exit_code}'"
    exit_with_message("ERROR", exit_message, exit_code)

  # Delete cache file since the prefix copyer has been added there is no need to keep this file around
  fullfile = os.path.join(SCRIPT_PATH, ".cache", file_name)
  if os.path.exists(fullfile):
    os.remove(fullfile)

  syncwemod()
  if not os.path.exists(os.path.join(SCRIPT_PATH,"wemod_bin","WeMod.exe")):
    main()

  log("Finished prefix copy")


# Function to build a new wineprefix
def build_prefix(proton_dir: str) -> None:
  import PySimpleGUI as sg

  # Set environment path
  path = os.path.join(SCRIPT_PATH, "bin") + ":" + proton_dir + ":" + os.getenv("PATH")

  #deref
  winpath = os.path.join(WINEPREFIX, "drive_c", "windows")
  log(f"Dereferencing '{winpath}'")
  deref(winpath)

  deps = []

  # Choose method to install dotnet48
  dotnet48_method = popup_options("dotnet48",
    "Would you like to install dotnet48 with winetricks (default) or with wemod-launcher?",
    [ "winetricks", "wemod-launcher" ]
  )

  # Add dependencies to the list
  deps.append("-q sdl cjkfonts vkd3d dxvk2030")

  if dotnet48_method == "winetricks":
    deps.append("-q dotnet48")

  # Install dependencies
  log("Running dependencies installation. This could take a while...")
  main()

  # Install each dependency
  resp = 0
  dep_i = -1
  while resp == 0 and (len(deps) - 1) > dep_i:
    dep_i = dep_i + 1
    resp = winetricks(deps[dep_i], path)

  # Install dotnet48 using wemod-launcher if selected
  if dotnet48_method == "wemod-launcher":
    log("Installing dotnet48...")
    dotnet48 = get_dotnet48()
    wine("winecfg -v win7", path)
    dotnet48_result = wine(dotnet48, path)

    if dotnet48_result != 0 and dotnet48_result != 194 and dotnet48_result != -15:
      exit_with_message("dotnet48 install error", "dotnet48 installation exited with code '{}'".format(dotnet48_result))

  wine("winecfg -v win10", path) # Set Windows version to Windows 10

  # Finalize setup
  if resp == 0:
    log("Finished dependencies installation. Writing init file...")
    open(INIT_FILE, "a").close()
  else:
    exit_with_message("ERROR", "Failed dependencies installation with code '{}'. Aborting...".format(resp), resp)

# Main run function
def run(skip_init=False):
  ARGS= " ".join(sys.argv[1:])
  AARGS=ARGS.split(" -- ")
  REAPER_CMD=" -- ".join(AARGS[:-1])
  PROTON_CMD=AARGS[-1].split(" ")
  PROTON=PROTON_CMD[0]

  # Initialize environment if not skipped
  if not skip_init:
    init(PROTON)

  # Parse command to be executed
  COMMAND=" ".join(PROTON_CMD[2:])
  WIN_CMD=COMMAND.split(" ")[0].split("/")[-1] + " " + " ".join(COMMAND.split(" ")[1:])
  WIN_PATHS=WIN_CMD.split("/")
  DIR_CONTS = os.listdir(".")

  CORRECT_PATH = list(filter(lambda x: x in DIR_CONTS, WIN_PATHS))

  if len(CORRECT_PATH) > 0:
    WIN_CMD = WIN_CMD[WIN_CMD.index(CORRECT_PATH[0]):]

  WIN_CMD_SPLIT = WIN_CMD.split(".exe")
  WIN_CMD = WIN_CMD_SPLIT[0] + ".exe"
  LAUNCH_OPTIONS=""

  if len(WIN_CMD_SPLIT) > 1:
    LAUNCH_OPTIONS = ".exe".join(WIN_CMD_SPLIT[1:])

  SPLIT_WEMOD_BAT = WEMOD_BAT.split(" ")
  QUOTED_WEMOD_BAT = f'\'{SPLIT_WEMOD_BAT[0]}\' \'{" ".join(SPLIT_WEMOD_BAT[1:])}\''

  FINAL = f'{REAPER_CMD} -- {PROTON} waitforexitandrun {QUOTED_WEMOD_BAT} \'{WIN_CMD}\'{LAUNCH_OPTIONS}'
  log(f"Executing:\n\t{FINAL}\n")

  # Execute the final command
  process = subprocess.Popen(FINAL, stdout=subprocess.PIPE, shell=True)
  for line in iter(process.stdout.readline,''):
    if line == None or line == b'':
      break
    log(line.decode("utf8"))

  resp = process.wait()
  log(f"Exit command with '{resp}'")
  return "EXIT"

# Log Python version and ensure dependencies
log(sys.version)
log("Ensuring Dependencies...")
requirements_txt = os.path.join(SCRIPT_PATH, "requirements.txt")
return_code = pip("install --break-system-packages -r {}".format(requirements_txt))

# Handle dependency installation errors
if return_code != 0:
  log("Failed to install dependencies. pip Exited with code '{}'".format(return_code))
  exit(return_code)

# Main execution block
RESP = ""
try:
  RESP = run()
except Exception as e:
  RESP = "ERR:\n" + str(e)

# Log final response or error
log(str(RESP) + "\n\n\n")
